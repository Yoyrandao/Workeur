trigger:
- master

variables:
  azureSubscription: '7c40d0be-b574-4241-8c61-a4c3073c154a'
  functionAppName: 'workeur'
  vmImageName: 'vs2017-win2016'
  workingDirectory: '$(System.DefaultWorkingDirectory)/src/Workeur.Service'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: |
          $(workingDirectory)/../*.UnitTests*/*.csproj
        arguments: --configuration $(BuildConfiguration)

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: 'development'
#     pool:
#       vmImage: $(vmImageName)

#     strategy:
#       runOnce:
#         deploy:

#           steps:
#           - task: AzureFunctionApp@1
#             displayName: 'Azure functions app deploy'
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: functionApp
#               appName: $(functionAppName)
#               package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'